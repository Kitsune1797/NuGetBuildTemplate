# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: Default

stages:
- stage: Build_Stage
  displayName:
  jobs:
  - job: BuildNuget
    displayName: Build Nuget packages
    variables: 
      BuildConfiguration: release
      NUGET_ENABLE_LEGACY_CSPROJ_PACK: true
    steps: 

    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: 
        
    - task: NuGetCommand@2
      displayName: do restore solution
      inputs:
        command: 'restore'
        restoreSolution: '**/*.sln'
        feedsToUse: 'select'
        vstsFeed: 'f4f8e08d-eb7e-4213-bb02-089881df31d6/fc59492f-6df1-4b7b-bb9f-70dcdca3a856'

    - task: DotNetCoreCLI@2
      displayName: do build csproj
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'

    - task: NuGetCommand@2
      displayName: do pack csproj
      inputs:
        command: 'pack'
        packagesToPack: '**/*.csproj'
        versioningScheme: 'off'
          
    - task: PowerShell@2
      displayName: do POST
      inputs:
        targetType: 'inline'
        script: |
          Remove-item alias:curl
          curl -X POST 'http://localhost:8081/service/rest/v1/components?repository=Max_PBB' -H 'accept: application/json' -H 'Content-Type: multipart/form-data' -H 'NX-ANTI-CSRF-TOKEN: 0.2680400104118965' -H 'X-Nexus-UI: true' -u 'admin:Password1' -F 'nuget.asset=@C:\Users\kwoks\agent\_work\6\a\NuGetBuildProject.1.0.0.nupkg'
        
    - task: PowerShell@2
      displayName: do GET
      inputs:
        targetType: 'inline'
        script: |
          Remove-item alias:curl
          curl -X GET 'http://localhost:8081/service/rest/v1/components?repository=Max_PBB' -H 'accept: application/json' -H 'NX-ANTI-CSRF-TOKEN: 0.2680400104118965' -H 'X-Nexus-UI: true' -u 'admin:Password1'
